name: Build, Scan and Deploy to Amazon ECS

on:
  push:
    branches:
      - main  # Trigger deployment on push to main branch

jobs:
  # Job: Build Docker image, scan for vulnerabilities, and push to Amazon ECR
  build-scan:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-3

      # Step 3: Create .env file using GitHub secret ENV
      - name: Create .env file
        run: |
          echo "${{ secrets.ENV }}" > .env

      # Step 4: Authenticate with Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 5: Set up Docker buildx and Build, tag, and push the image to Amazon ECR
      - name: Set up Docker buildx and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          IMAGE_TAG: latest
          GITHUB_SHA: ${{ github.sha }}  # Git commit hash for versioning
        run: |
          # Set up buildx
          docker buildx create --use
          
          # Build and push 'latest' tag for linux/arm64 platform
          docker buildx build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f .devops/Dockerfile --push .
          
          # Build and push short Git commit SHA tag for linux/arm64 platform
          VERSION_TAG="${GITHUB_SHA:0:7}"  # Short SHA (first 7 characters)
          docker buildx build --platform linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$VERSION_TAG -f .devops/Dockerfile --push .

      # Step 6: Run Trivy vulnerability scanner
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:latest
          platforms: linux/arm64
          format: "table"
          ignore-unfixed: true
          severity: "CRITICAL,HIGH,MEDIUM"
          output: "trivy-report.json"

      # Step 7: Upload Trivy JSON report as artifact (v4)
      - name: Upload Trivy JSON report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: trivy-vulnerability-report
          path: trivy-report.json

  # Job: Update ECS task definition and deploy
  deploy:
    runs-on: ubuntu-latest
    needs: build-scan  # This job depends on the build-scan job

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-3

      # Step 3: Download the current task definition from Amazon ECS
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition int-be-development --query "taskDefinition" > task-definition.json

      # Step 4: Upload task definition as artifact (v4)
      - name: Upload Task Definition as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ecs-task-definition
          path: task-definition.json

      # Step 5: Update the task definition with the new image
      - name: Fill in new image ID in task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: int-be-development
          image: 277707103873.dkr.ecr.ap-southeast-3.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 6: Deploy the updated task definition to ECS
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: int-be-development
          cluster: studilmu-development-cluster
